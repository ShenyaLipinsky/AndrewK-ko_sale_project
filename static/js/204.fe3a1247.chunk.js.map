{"version":3,"file":"static/js/204.fe3a1247.chunk.js","mappings":"0MAGO,MAAMA,EAAYC,IAA0B,IAAzB,MAAEC,EAAK,SAAEC,GAAUF,EAC3C,MAAOG,EAAOC,IAAYC,EAAAA,EAAAA,UAASJ,GACnC,OACEK,EAAAA,EAAAA,MAAA,QACEJ,SAAUK,IACRA,EAAEC,iBACFN,EAASC,EAAM,EACfM,SAAA,EAEFC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLV,MAAOE,IAAUF,EAAQA,EAAQE,EACjCS,SAAUL,GAAKH,EAASG,EAAEM,OAAOZ,UAEnCS,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,SAAC,aACjB,E,wBCbX,MAAMK,GAAOC,EAAAA,EAAAA,OAAK,IAAM,gCAElBC,GAAOD,EAAAA,EAAAA,OAAK,IAAM,gEAmDxB,EAjDiBf,IAA0D,IAADiB,EAAA,IAAxD,yBAAEC,EAAwB,sBAAEC,GAAuBnB,EACnE,MAAMoB,GAAWC,EAAAA,EAAAA,OAIfC,IACEjB,EAAAA,EAAAA,UAAS,KACNkB,EAAcC,IAAmBC,EAAAA,EAAAA,MAClCC,EAAsC,QAA5BT,EAAGM,EAAaI,IAAI,gBAAQ,IAAAV,EAAAA,EAAI,IAChDW,EAAAA,EAAAA,YACE,KACqB,KAAfF,IAGJG,EAAAA,EAAAA,IAAaH,GAAYI,KAAKR,EAAgB,IAQlD,OACEZ,EAAAA,EAAAA,KAAA,QAAAD,UAEEH,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAAtB,SAAA,EAOEC,EAAAA,EAAAA,KAACI,EAAI,KACLJ,EAAAA,EAAAA,KAACX,EAAS,CAACE,MAAOyB,EAAYxB,SAfVD,IACxBuB,EAA0B,KAAVvB,EAAe,CAAE+B,MAAO/B,GAAU,CAAC,EAAE,KAejDS,EAAAA,EAAAA,KAACM,EAAI,CACHE,yBAA0BA,EAC1BC,sBAAuBA,EACvBc,YAAaC,EAAAA,GACbd,SAAUA,EACVe,MAAO,CAAEC,KAAMhB,MAEjBV,EAAAA,EAAAA,KAAC2B,EAAAA,SAAQ,CAACC,SAAU,KAAK7B,UACvBC,EAAAA,EAAAA,KAAC6B,EAAAA,GAAM,UAIN,C,qDCvDX,MAAMC,EAAQC,EAAAA,MAAAA,QAERC,EAAM,gCACNC,EAAU,mCAETC,eAAeC,IAAoD,IAAxCC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,oBAAqBf,EAAKe,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrE,GAAiB,OAAbH,EACF,OAeF,aAbuBN,EACpBb,IAAI,GAAGe,IAAMI,IAAWd,EAAQ,IAAMA,EAAQ,cAAcW,KAC5Db,MAAKoB,GACGA,EAAIC,MAWjB,CAGOP,eAAeQ,EAAeC,GACnC,IACE,MAAM,YAAEC,EAAW,eAAEC,EAAc,aAAEC,EAAY,SAAEC,EAAQ,OAAEC,SACrDlB,EAAMb,IAAI,GAAGe,UAAYW,aAAcV,KAAWb,MAAKoB,GACpDA,EAAIC,OAIf,MAAO,CACLQ,WAFiB,mCAAmCL,IAGpDC,iBACAC,eACAC,WACAC,SAEJ,CAAE,MAAOE,GAEP,OADAC,QAAQC,IAAIF,GACL,IACT,CACF,CAiCOhB,eAAef,EAAa1B,GAOjC,aAN2BqC,EACxBb,IAAI,GAAGe,yBAA2BC,WAAiBxC,KACnD2B,MAAKoB,GACGA,EAAIC,KAAKY,SAItB,C","sources":["components/SearchBox/SearchBox.js","components/Pages/Products/Products.js","components/services/API-MovieDB.js"],"sourcesContent":["import { useState } from 'react';\nimport propTypes from 'prop-types';\n\nexport const SearchBox = ({ value, onSubmit }) => {\n  const [queue, setQueue] = useState(value);\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        onSubmit(queue);\n      }}\n    >\n      <input\n        type=\"text\"\n        value={queue === value ? value : queue}\n        onChange={e => setQueue(e.target.value)}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\nSearchBox.propTypes = {\n  value: propTypes.string,\n  onSubmit: propTypes.func,\n};\n","import { lazy, Suspense, useEffect, useState } from 'react';\nimport { Outlet, useLocation, useSearchParams } from 'react-router-dom';\nimport { SearchBox } from '../../SearchBox/SearchBox';\nimport { searchMovies } from 'components/services/API-MovieDB';\nimport { fetchProductById } from 'components/services/API-Products_DB';\nconst Hero = lazy(() => import('../../Hero/Hero'));\n\nconst Home = lazy(() => import('../../Home/Home'));\n\nconst Products = ({ handleUpdateCartQuantity, handleUpdateCartItems }) => {\n  const location = useLocation();\n  // console.log(location);\n  const [\n    // foundedFilms,\n    setFoundedFilms,\n  ] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queueParam = searchParams.get('query') ?? '';\n  useEffect(\n    () => {\n      if (queueParam === '') {\n        return;\n      }\n      searchMovies(queueParam).then(setFoundedFilms);\n    }\n    // [queueParam]\n  );\n  const changeSearchValue = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  return (\n    <main>\n      {/* {foundedFilms.length > 0 && ( */}\n      <>\n        {/* <MainPage\n            data={foundedFilms}\n            moreDetails={fetchMovieById}\n            location={location}\n            state={{ from: location }}\n          /> */}\n        <Hero />\n        <SearchBox value={queueParam} onSubmit={changeSearchValue} />\n        <Home\n          handleUpdateCartQuantity={handleUpdateCartQuantity}\n          handleUpdateCartItems={handleUpdateCartItems}\n          moreDetails={fetchProductById}\n          location={location}\n          state={{ from: location }}\n        />\n        <Suspense fallback={null}>\n          <Outlet />\n        </Suspense>\n      </>\n      {/* )} */}\n    </main>\n  );\n};\nexport default Products;\n","const axios = require('axios').default;\n\nconst URI = 'https://api.themoviedb.org/3/';\nconst API_KEY = '52671e5fdac66fed8f134cf47bc0c7d2';\n\nexport async function fetchMovies(endpoint = 'trending/all/week', query) {\n  if (endpoint === null) {\n    return;\n  }\n  const response = await axios\n    .get(`${URI}${endpoint}${query ? '/' + query : ''}?api_key=${API_KEY}`)\n    .then(res => {\n      return res.data;\n    });\n  // console.log('res', response);\n\n  // const movieHeadingData = [\n  //   response.results.map(({ id, original_title, name }) => {\n  //     return { id, original_title, name };\n  //   }),\n  // ];\n  // console.log('MHD', movieHeadingData);\n  return response;\n}\n\n\nexport async function fetchMovieById(id) {\n  try {\n    const { poster_path, original_title, vote_average, overview, genres } =\n      await axios.get(`${URI}movie/${id}?api_key=${API_KEY}`).then(res => {\n        return res.data;\n      });\n\n    const posterPath = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n    return {\n      posterPath,\n      original_title,\n      vote_average,\n      overview,\n      genres,\n    };\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n\nexport async function fetchCrew(id) {\n  const fetchCrew = await axios\n    .get(`${URI}movie/${id}/credits?api_key=${API_KEY}`)\n    .then(res => {\n      return res.data.crew;\n    });\n\n  const crewInfo = fetchCrew.map(member => {\n    const { profile_path, name, job, id } = member;\n    return { profile_path, name, job, id };\n  });\n\n  const filterCrew = new Map(crewInfo.map(crew => [crew.id, crew]));\n  const filteredCrew = [...filterCrew.values()];\n\n  return filteredCrew;\n}\nexport async function fetchReviews(id) {\n  const fetchReviews = await axios\n    .get(`${URI}movie/${id}/reviews?api_key=${API_KEY}`)\n    .then(res => {\n      return res.data.results;\n    });\n\n  const reviewInfo = fetchReviews.map(review => {\n    const { author, content, id } = review;\n    return { author, content, id };\n  });\n  return reviewInfo;\n}\n\nexport async function searchMovies(queue) {\n  const searchMovies = await axios\n    .get(`${URI}search/movie?api_key=${API_KEY}&query=${queue}`)\n    .then(res => {\n      return res.data.results;\n    });\n\n  return searchMovies;\n}\n"],"names":["SearchBox","_ref","value","onSubmit","queue","setQueue","useState","_jsxs","e","preventDefault","children","_jsx","type","onChange","target","Hero","lazy","Home","_searchParams$get","handleUpdateCartQuantity","handleUpdateCartItems","location","useLocation","setFoundedFilms","searchParams","setSearchParams","useSearchParams","queueParam","get","useEffect","searchMovies","then","_Fragment","query","moreDetails","fetchProductById","state","from","Suspense","fallback","Outlet","axios","require","URI","API_KEY","async","fetchMovies","endpoint","arguments","length","undefined","res","data","fetchMovieById","id","poster_path","original_title","vote_average","overview","genres","posterPath","error","console","log","results"],"sourceRoot":""}